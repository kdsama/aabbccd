/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/domain/Entity.java.e.vm
 */
package com.mycompany.myapp.domain;

import java.io.Serializable;
import java.util.logging.Logger;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotEmpty;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;

@Entity
@Table(name = "user_details", uniqueConstraints = { @UniqueConstraint(name = "PRIMARY", columnNames = { "id", "username" }) })
public class UserDetails implements Identifiable<UserDetailsPk>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(UserDetails.class.getName());

    // Composite primary key
    private UserDetailsPk id = new UserDetailsPk();

    // Raw attributes
    private String name;
    private Integer phNumber;
    private String emailId;
    private String parent;

    @Override
    public String entityClassName() {
        return UserDetails.class.getSimpleName();
    }

    // -----------------------
    // Composite Primary Key
    // -----------------------

    /**
     * Returns the composite primary key.
     */
    @Override
    @EmbeddedId
    public UserDetailsPk getId() {
        return id;
    }

    /**
     * Set the composite primary key.
     * @param id the composite primary key.
     */
    @Override
    public void setId(UserDetailsPk id) {
        this.id = id;
    }

    public UserDetails id(UserDetailsPk id) {
        setId(id);
        return this;
    }

    /**
     * Tells whether or not this instance has a non empty composite primary key set.
     * @return true if a non empty primary key is set, false otherwise
     */
    @Override
    @Transient
    public boolean isIdSet() {
        return getId() != null && getId().areFieldsSet();
    }
    // -- [name] ------------------------

    @NotEmpty
    @Size(max = 45)
    @Column(name = "name", nullable = false, length = 45)
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public UserDetails name(String name) {
        setName(name);
        return this;
    }
    // -- [phNumber] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "ph_number", nullable = false, precision = 10)
    public Integer getPhNumber() {
        return phNumber;
    }

    public void setPhNumber(Integer phNumber) {
        this.phNumber = phNumber;
    }

    public UserDetails phNumber(Integer phNumber) {
        setPhNumber(phNumber);
        return this;
    }
    // -- [emailId] ------------------------

    @NotEmpty
    @Size(max = 45)
    @Column(name = "emailId", nullable = false, length = 45)
    public String getEmailId() {
        return emailId;
    }

    public void setEmailId(String emailId) {
        this.emailId = emailId;
    }

    public UserDetails emailId(String emailId) {
        setEmailId(emailId);
        return this;
    }
    // -- [parent] ------------------------

    @NotEmpty
    @Size(max = 45)
    @Column(name = "parent", nullable = false, length = 45)
    public String getParent() {
        return parent;
    }

    public void setParent(String parent) {
        this.parent = parent;
    }

    public UserDetails parent(String parent) {
        setParent(parent);
        return this;
    }

    /**
     * Apply the default values.
     */
    public UserDetails withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof UserDetails && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this UserDetails instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("name", getName()) //
                .add("phNumber", getPhNumber()) //
                .add("emailId", getEmailId()) //
                .add("parent", getParent()) //
                .toString();
    }
}