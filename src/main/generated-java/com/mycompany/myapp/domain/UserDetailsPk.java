/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/domain/CompositePk.java.cpk.vm
 */
package com.mycompany.myapp.domain;

import static javax.persistence.GenerationType.IDENTITY;
import static org.apache.commons.lang.StringUtils.isNotEmpty;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.GeneratedValue;
import javax.persistence.Transient;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotEmpty;

import com.google.common.base.Objects;

@Embeddable

public class UserDetailsPk implements Comparable<UserDetailsPk>, Serializable {
    private static final long serialVersionUID = 1L;

    private Integer id;
    private String username;

    public UserDetailsPk() {
    }

    public UserDetailsPk(Integer id, String username) {
        this.id = id;
        this.username = username;
    }

    /**
     * Helper to determine if this composite primary key is fully set.
     */
    @Transient
    public boolean areFieldsSet() {
        return isIdSet() && isUsernameSet();
    }

    /**
     * Helper method to determine if this instance is considered empty, that is,
     * if all the non primary key columns are null.
     */
    @Transient
    public boolean isEmpty() {
        return !isIdSet() && !isUsernameSet();
    }

    //-- [id] ------------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "id", nullable = false, precision = 10)
    @GeneratedValue(strategy = IDENTITY)
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public UserDetailsPk id(Integer id) {
        setId(id);
        return this;
    }

    /**
     * Helper that determines if this attribute is set or not.
     */
    @Transient
    public boolean isIdSet() {
        return getId() != null;
    }

    //-- [username] ------------------------------

    @NotEmpty
    @Size(max = 45)
    @Column(name = "username", nullable = false, length = 45)
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public UserDetailsPk username(String username) {
        setUsername(username);
        return this;
    }

    /**
     * Helper that determines if this attribute is set or not.
     */
    @Transient
    public boolean isUsernameSet() {
        return getUsername() != null && !getUsername().isEmpty();
    }

    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof UserDetailsPk && hashCode() == other.hashCode());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getId(), //
                getUsername());
    }

    @Override
    public int compareTo(UserDetailsPk other) {
        return other == null ? -1 : hashCode() - other.hashCode();
    }

    /**
    * Return the string representation of the composite primary key, it should be reversable by version produced by the {@link #String()} method
    */
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        if (isIdSet()) {
            result.append(getId());
        }
        result.append("_");
        if (isUsernameSet()) {
            result.append(getUsername());
        }

        return result.toString();
    }

    /**
     * Build an instance from a string version produced by the {@link #toString()} method
     */
    public static UserDetailsPk fromString(String string) {
        UserDetailsPk result = new UserDetailsPk();
        String[] values = string.split("_");
        if (isNotEmpty(values[0])) {
            result.setId(Integer.valueOf(values[0]));
        }
        if (isNotEmpty(values[1])) {
            result.setUsername(values[1]);
        }

        return result;
    }
}
