/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/domain/Entity.java.e.vm
 */
package com.mycompany.myapp.domain;

import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;
import java.util.logging.Logger;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Digits;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;

@Entity
@Table(name = "dis_table")
public class DisTable implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(DisTable.class.getName());

    // Raw attributes
    private Integer id;
    private Integer iv1;
    private Integer iv2;
    private Integer iv3;

    // Many to one
    private User username;

    @Override
    public String entityClassName() {
        return DisTable.class.getSimpleName();
    }

    // -- [id] ------------------------

    @Override
    @Column(name = "id", precision = 10)
    @GeneratedValue(strategy = IDENTITY)
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public DisTable id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    public boolean isIdSet() {
        return id != null;
    }
    // -- [iv1] ------------------------

    @Digits(integer = 10, fraction = 0)
    @Column(name = "iv1", precision = 10)
    public Integer getIv1() {
        return iv1;
    }

    public void setIv1(Integer iv1) {
        this.iv1 = iv1;
    }

    public DisTable iv1(Integer iv1) {
        setIv1(iv1);
        return this;
    }
    // -- [iv2] ------------------------

    @Digits(integer = 10, fraction = 0)
    @Column(name = "iv2", precision = 10)
    public Integer getIv2() {
        return iv2;
    }

    public void setIv2(Integer iv2) {
        this.iv2 = iv2;
    }

    public DisTable iv2(Integer iv2) {
        setIv2(iv2);
        return this;
    }
    // -- [iv3] ------------------------

    @Digits(integer = 10, fraction = 0)
    @Column(name = "iv3", precision = 10)
    public Integer getIv3() {
        return iv3;
    }

    public void setIv3(Integer iv3) {
        this.iv3 = iv3;
    }

    public DisTable iv3(Integer iv3) {
        setIv3(iv3);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to One support
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: DisTable.username ==> User.login
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @JoinColumn(name = "username", referencedColumnName = "login")
    @ManyToOne
    public User getUsername() {
        return username;
    }

    /**
     * Set the {@link #username} without adding this DisTable instance on the passed {@link #username}
     */
    public void setUsername(User username) {
        this.username = username;
    }

    public DisTable username(User username) {
        setUsername(username);
        return this;
    }

    /**
     * Apply the default values.
     */
    public DisTable withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof DisTable && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this DisTable instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("iv1", getIv1()) //
                .add("iv2", getIv2()) //
                .add("iv3", getIv3()) //
                .toString();
    }
}