/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.mycompany.myapp.rest;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestBody;

import com.mycompany.myapp.domain.ReqTable;
import com.mycompany.myapp.dto.ReqTableDTO;
import com.mycompany.myapp.dto.ReqTableDTOService;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.ReqTableRepository;
import com.mycompany.myapp.rest.support.AutoCompleteQuery;

@RestController
@RequestMapping("/api/reqTables")
public class ReqTableResource {

    private final Logger log = LoggerFactory.getLogger(ReqTableResource.class);

    @Inject
    private ReqTableRepository reqTableRepository;
    @Inject
    private ReqTableDTOService reqTableDTOService;

    /**
     * Create a new ReqTable.
     */
    @RequestMapping(value = "/", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<ReqTableDTO> create(@RequestBody ReqTableDTO reqTableDTO) throws URISyntaxException {

        log.debug("Create ReqTableDTO : {}", reqTableDTO);

        if (reqTableDTO.isIdSet()) {
            return ResponseEntity.badRequest().header("Failure", "Cannot create ReqTable with existing ID").body(null);
        }

        ReqTableDTO result = reqTableDTOService.save(reqTableDTO);

        return ResponseEntity.created(new URI("/api/reqTables/" + result.id)).body(result);
    }

    /**
    * Find by id ReqTable.
    */
    @RequestMapping(value = "/{id}", method = GET, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<ReqTableDTO> findById(@PathVariable Integer id) throws URISyntaxException {

        log.debug("Find by id ReqTable : {}", id);

        return Optional.ofNullable(reqTableDTOService.findOne(id)).map(reqTableDTO -> new ResponseEntity<>(reqTableDTO, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Update ReqTable.
     */
    @RequestMapping(value = "/", method = PUT, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<ReqTableDTO> update(@RequestBody ReqTableDTO reqTableDTO) throws URISyntaxException {

        log.debug("Update ReqTableDTO : {}", reqTableDTO);

        if (!reqTableDTO.isIdSet()) {
            return create(reqTableDTO);
        }

        ReqTableDTO result = reqTableDTOService.save(reqTableDTO);

        return ResponseEntity.ok().body(result);
    }

    /**
     * Find a Page of ReqTable using query by example.
     */
    @RequestMapping(value = "/page", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<ReqTableDTO>> findAll(@RequestBody PageRequestByExample<ReqTableDTO> prbe) throws URISyntaxException {
        PageResponse<ReqTableDTO> pageResponse = reqTableDTOService.findAll(prbe);
        return new ResponseEntity<>(pageResponse, new HttpHeaders(), HttpStatus.OK);
    }

    /**
    * Auto complete support.
    */
    @RequestMapping(value = "/complete", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<ReqTableDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {

        List<ReqTableDTO> results = reqTableDTOService.complete(acq.query, acq.maxResults);

        return new ResponseEntity<>(results, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Delete by id ReqTable.
     */
    @RequestMapping(value = "/{id}", method = DELETE, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {

        log.debug("Delete by id ReqTable : {}", id);

        try {
            reqTableRepository.delete(id);
            return ResponseEntity.ok().build();
        } catch (Exception x) {
            // todo: dig exception, most likely org.hibernate.exception.ConstraintViolationException
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
    }
}