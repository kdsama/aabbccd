/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.SupTable;
import com.mycompany.myapp.domain.SupTable_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.SupTableRepository;

/**
 * A simple DTO Facility for SupTable.
 */
@Service
public class SupTableDTOService {

    @Inject
    private SupTableRepository supTableRepository;

    @Transactional(readOnly = true)
    public SupTableDTO findOne(Integer id) {
        return toDTO(supTableRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<SupTableDTO> complete(String query, int maxResults) {
        List<SupTable> results = supTableRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<SupTableDTO> findAll(PageRequestByExample<SupTableDTO> req) {
        Example<SupTable> example = null;
        SupTable supTable = toEntity(req.example);

        if (supTable != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
            ;

            example = Example.of(supTable, matcher);
        }

        Page<SupTable> page;
        if (example != null) {
            page = supTableRepository.findAll(example, req.toPageable());
        } else {
            page = supTableRepository.findAll(req.toPageable());
        }

        List<SupTableDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public SupTableDTO save(SupTableDTO dto) {
        if (dto == null) {
            return null;
        }

        final SupTable supTable;

        if (dto.isIdSet()) {
            SupTable supTableTmp = supTableRepository.findOne(dto.id);
            if (supTableTmp != null) {
                supTable = supTableTmp;
            } else {
                supTable = new SupTable();
                supTable.setId(dto.id);
            }
        } else {
            supTable = new SupTable();
        }

        supTable.setIv1(dto.iv1);

        supTable.setIv2(dto.iv2);

        supTable.setIv3(dto.iv3);

        supTable.setTimestamp(dto.timestamp);

        return toDTO(supTableRepository.save(supTable));
    }

    /**
     * Converts the passed supTable to a DTO.
     */
    public SupTableDTO toDTO(SupTable supTable) {
        return toDTO(supTable, 1);
    }

    /**
     * Converts the passed supTable to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param supTable
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public SupTableDTO toDTO(SupTable supTable, int depth) {
        if (supTable == null) {
            return null;
        }

        SupTableDTO dto = new SupTableDTO();

        dto.id = supTable.getId();
        dto.iv1 = supTable.getIv1();
        dto.iv2 = supTable.getIv2();
        dto.iv3 = supTable.getIv3();
        dto.timestamp = supTable.getTimestamp();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a SupTable.
     * Convenient for query by example.
     */
    public SupTable toEntity(SupTableDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a SupTable.
     * Convenient for query by example.
     */
    public SupTable toEntity(SupTableDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        SupTable supTable = new SupTable();

        supTable.setId(dto.id);
        supTable.setIv1(dto.iv1);
        supTable.setIv2(dto.iv2);
        supTable.setIv3(dto.iv3);
        supTable.setTimestamp(dto.timestamp);
        if (depth-- > 0) {
        }

        return supTable;
    }
}