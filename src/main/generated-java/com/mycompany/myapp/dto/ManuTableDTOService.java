/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.ManuTable;
import com.mycompany.myapp.domain.ManuTable_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.ManuTableRepository;

/**
 * A simple DTO Facility for ManuTable.
 */
@Service
public class ManuTableDTOService {

    @Inject
    private ManuTableRepository manuTableRepository;

    @Transactional(readOnly = true)
    public ManuTableDTO findOne(Integer id) {
        return toDTO(manuTableRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<ManuTableDTO> complete(String query, int maxResults) {
        List<ManuTable> results = manuTableRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<ManuTableDTO> findAll(PageRequestByExample<ManuTableDTO> req) {
        Example<ManuTable> example = null;
        ManuTable manuTable = toEntity(req.example);

        if (manuTable != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
            ;

            example = Example.of(manuTable, matcher);
        }

        Page<ManuTable> page;
        if (example != null) {
            page = manuTableRepository.findAll(example, req.toPageable());
        } else {
            page = manuTableRepository.findAll(req.toPageable());
        }

        List<ManuTableDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public ManuTableDTO save(ManuTableDTO dto) {
        if (dto == null) {
            return null;
        }

        final ManuTable manuTable;

        if (dto.isIdSet()) {
            ManuTable manuTableTmp = manuTableRepository.findOne(dto.id);
            if (manuTableTmp != null) {
                manuTable = manuTableTmp;
            } else {
                manuTable = new ManuTable();
                manuTable.setId(dto.id);
            }
        } else {
            manuTable = new ManuTable();
        }

        manuTable.setIv1(dto.iv1);

        manuTable.setIv2(dto.iv2);

        manuTable.setIv3(dto.iv3);

        manuTable.setTimestamp(dto.timestamp);

        return toDTO(manuTableRepository.save(manuTable));
    }

    /**
     * Converts the passed manuTable to a DTO.
     */
    public ManuTableDTO toDTO(ManuTable manuTable) {
        return toDTO(manuTable, 1);
    }

    /**
     * Converts the passed manuTable to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param manuTable
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public ManuTableDTO toDTO(ManuTable manuTable, int depth) {
        if (manuTable == null) {
            return null;
        }

        ManuTableDTO dto = new ManuTableDTO();

        dto.id = manuTable.getId();
        dto.iv1 = manuTable.getIv1();
        dto.iv2 = manuTable.getIv2();
        dto.iv3 = manuTable.getIv3();
        dto.timestamp = manuTable.getTimestamp();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a ManuTable.
     * Convenient for query by example.
     */
    public ManuTable toEntity(ManuTableDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a ManuTable.
     * Convenient for query by example.
     */
    public ManuTable toEntity(ManuTableDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        ManuTable manuTable = new ManuTable();

        manuTable.setId(dto.id);
        manuTable.setIv1(dto.iv1);
        manuTable.setIv2(dto.iv2);
        manuTable.setIv3(dto.iv3);
        manuTable.setTimestamp(dto.timestamp);
        if (depth-- > 0) {
        }

        return manuTable;
    }
}