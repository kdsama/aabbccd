/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.DisTable;
import com.mycompany.myapp.domain.DisTable_;
import com.mycompany.myapp.domain.User;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.DisTableRepository;
import com.mycompany.myapp.repository.UserRepository;

/**
 * A simple DTO Facility for DisTable.
 */
@Service
public class DisTableDTOService {

    @Inject
    private DisTableRepository disTableRepository;
    @Inject
    private UserDTOService userDTOService;
    @Inject
    private UserRepository userRepository;

    @Transactional(readOnly = true)
    public DisTableDTO findOne(Integer id) {
        return toDTO(disTableRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<DisTableDTO> complete(String query, int maxResults) {
        List<DisTable> results = disTableRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<DisTableDTO> findAll(PageRequestByExample<DisTableDTO> req) {
        Example<DisTable> example = null;
        DisTable disTable = toEntity(req.example);

        if (disTable != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
            ;

            example = Example.of(disTable, matcher);
        }

        Page<DisTable> page;
        if (example != null) {
            page = disTableRepository.findAll(example, req.toPageable());
        } else {
            page = disTableRepository.findAll(req.toPageable());
        }

        List<DisTableDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public DisTableDTO save(DisTableDTO dto) {
        if (dto == null) {
            return null;
        }

        final DisTable disTable;

        if (dto.isIdSet()) {
            DisTable disTableTmp = disTableRepository.findOne(dto.id);
            if (disTableTmp != null) {
                disTable = disTableTmp;
            } else {
                disTable = new DisTable();
                disTable.setId(dto.id);
            }
        } else {
            disTable = new DisTable();
        }

        disTable.setIv1(dto.iv1);

        disTable.setIv2(dto.iv2);

        disTable.setIv3(dto.iv3);

        if (dto.username == null) {
            disTable.setUsername(null);
        } else {
            User username = disTable.getUsername();
            if (username == null || (username.getId().compareTo(dto.username.id) != 0)) {
                disTable.setUsername(userRepository.findOne(dto.username.id));
            }
        }

        return toDTO(disTableRepository.save(disTable));
    }

    /**
     * Converts the passed disTable to a DTO.
     */
    public DisTableDTO toDTO(DisTable disTable) {
        return toDTO(disTable, 1);
    }

    /**
     * Converts the passed disTable to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param disTable
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public DisTableDTO toDTO(DisTable disTable, int depth) {
        if (disTable == null) {
            return null;
        }

        DisTableDTO dto = new DisTableDTO();

        dto.id = disTable.getId();
        dto.iv1 = disTable.getIv1();
        dto.iv2 = disTable.getIv2();
        dto.iv3 = disTable.getIv3();
        if (depth-- > 0) {
            dto.username = userDTOService.toDTO(disTable.getUsername(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a DisTable.
     * Convenient for query by example.
     */
    public DisTable toEntity(DisTableDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a DisTable.
     * Convenient for query by example.
     */
    public DisTable toEntity(DisTableDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        DisTable disTable = new DisTable();

        disTable.setId(dto.id);
        disTable.setIv1(dto.iv1);
        disTable.setIv2(dto.iv2);
        disTable.setIv3(dto.iv3);
        if (depth-- > 0) {
            disTable.setUsername(userDTOService.toEntity(dto.username, depth));
        }

        return disTable;
    }
}