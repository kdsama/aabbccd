/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Logindetails;
import com.mycompany.myapp.domain.Logindetails_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.LogindetailsRepository;

/**
 * A simple DTO Facility for Logindetails.
 */
@Service
public class LogindetailsDTOService {

    @Inject
    private LogindetailsRepository logindetailsRepository;

    @Transactional(readOnly = true)
    public LogindetailsDTO findOne(String id) {
        return toDTO(logindetailsRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<LogindetailsDTO> complete(String query, int maxResults) {
        List<Logindetails> results = logindetailsRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<LogindetailsDTO> findAll(PageRequestByExample<LogindetailsDTO> req) {
        Example<Logindetails> example = null;
        Logindetails logindetails = toEntity(req.example);

        if (logindetails != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(Logindetails_.id.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Logindetails_.password.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(logindetails, matcher);
        }

        Page<Logindetails> page;
        if (example != null) {
            page = logindetailsRepository.findAll(example, req.toPageable());
        } else {
            page = logindetailsRepository.findAll(req.toPageable());
        }

        List<LogindetailsDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public LogindetailsDTO save(LogindetailsDTO dto) {
        if (dto == null) {
            return null;
        }

        final Logindetails logindetails;

        if (dto.isIdSet()) {
            Logindetails logindetailsTmp = logindetailsRepository.findOne(dto.id);
            if (logindetailsTmp != null) {
                logindetails = logindetailsTmp;
            } else {
                logindetails = new Logindetails();
                logindetails.setId(dto.id);
            }
        } else {
            logindetails = new Logindetails();
        }

        logindetails.setPassword(dto.password);

        logindetails.setManu(dto.manu);

        logindetails.setSup(dto.sup);

        return toDTO(logindetailsRepository.save(logindetails));
    }

    /**
     * Converts the passed logindetails to a DTO.
     */
    public LogindetailsDTO toDTO(Logindetails logindetails) {
        return toDTO(logindetails, 1);
    }

    /**
     * Converts the passed logindetails to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param logindetails
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public LogindetailsDTO toDTO(Logindetails logindetails, int depth) {
        if (logindetails == null) {
            return null;
        }

        LogindetailsDTO dto = new LogindetailsDTO();

        dto.id = logindetails.getId();
        dto.password = logindetails.getPassword();
        dto.manu = logindetails.getManu();
        dto.sup = logindetails.getSup();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Logindetails.
     * Convenient for query by example.
     */
    public Logindetails toEntity(LogindetailsDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Logindetails.
     * Convenient for query by example.
     */
    public Logindetails toEntity(LogindetailsDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Logindetails logindetails = new Logindetails();

        logindetails.setId(dto.id);
        logindetails.setPassword(dto.password);
        logindetails.setManu(dto.manu);
        logindetails.setSup(dto.sup);
        if (depth-- > 0) {
        }

        return logindetails;
    }
}