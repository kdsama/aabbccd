/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.UserDetails;
import com.mycompany.myapp.domain.UserDetailsPk;
import com.mycompany.myapp.domain.UserDetails_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.UserDetailsRepository;

/**
 * A simple DTO Facility for UserDetails.
 */
@Service
public class UserDetailsDTOService {

    @Inject
    private UserDetailsRepository userDetailsRepository;

    @Transactional(readOnly = true)
    public UserDetailsDTO findOne(UserDetailsPk id) {
        return toDTO(userDetailsRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<UserDetailsDTO> complete(String query, int maxResults) {
        List<UserDetails> results = userDetailsRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<UserDetailsDTO> findAll(PageRequestByExample<UserDetailsDTO> req) {
        Example<UserDetails> example = null;
        UserDetails userDetails = toEntity(req.example);

        if (userDetails != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(UserDetails_.name.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(UserDetails_.emailId.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(UserDetails_.parent.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(userDetails, matcher);
        }

        Page<UserDetails> page;
        if (example != null) {
            page = userDetailsRepository.findAll(example, req.toPageable());
        } else {
            page = userDetailsRepository.findAll(req.toPageable());
        }

        List<UserDetailsDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public UserDetailsDTO save(UserDetailsDTO dto) {
        if (dto == null) {
            return null;
        }

        final UserDetails userDetails;

        if (dto.isIdSet()) {
            UserDetails userDetailsTmp = userDetailsRepository.findOne(dto.id);
            if (userDetailsTmp != null) {
                userDetails = userDetailsTmp;
            } else {
                userDetails = new UserDetails();
                userDetails.setId(dto.id);
            }
        } else {
            userDetails = new UserDetails();
        }

        userDetails.setName(dto.name);

        userDetails.setPhNumber(dto.phNumber);

        userDetails.setEmailId(dto.emailId);

        userDetails.setParent(dto.parent);

        return toDTO(userDetailsRepository.save(userDetails));
    }

    /**
     * Converts the passed userDetails to a DTO.
     */
    public UserDetailsDTO toDTO(UserDetails userDetails) {
        return toDTO(userDetails, 1);
    }

    /**
     * Converts the passed userDetails to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param userDetails
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public UserDetailsDTO toDTO(UserDetails userDetails, int depth) {
        if (userDetails == null) {
            return null;
        }

        UserDetailsDTO dto = new UserDetailsDTO();

        dto.id = userDetails.getId();
        dto.name = userDetails.getName();
        dto.phNumber = userDetails.getPhNumber();
        dto.emailId = userDetails.getEmailId();
        dto.parent = userDetails.getParent();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a UserDetails.
     * Convenient for query by example.
     */
    public UserDetails toEntity(UserDetailsDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a UserDetails.
     * Convenient for query by example.
     */
    public UserDetails toEntity(UserDetailsDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        UserDetails userDetails = new UserDetails();

        userDetails.setId(dto.id);
        userDetails.setName(dto.name);
        userDetails.setPhNumber(dto.phNumber);
        userDetails.setEmailId(dto.emailId);
        userDetails.setParent(dto.parent);
        if (depth-- > 0) {
        }

        return userDetails;
    }
}