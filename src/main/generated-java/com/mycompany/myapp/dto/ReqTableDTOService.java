/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.ReqTable;
import com.mycompany.myapp.domain.ReqTable_;
import com.mycompany.myapp.domain.User;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.ReqTableRepository;
import com.mycompany.myapp.repository.UserRepository;

/**
 * A simple DTO Facility for ReqTable.
 */
@Service
public class ReqTableDTOService {

    @Inject
    private ReqTableRepository reqTableRepository;
    @Inject
    private UserDTOService userDTOService;
    @Inject
    private UserRepository userRepository;

    @Transactional(readOnly = true)
    public ReqTableDTO findOne(Integer id) {
        return toDTO(reqTableRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<ReqTableDTO> complete(String query, int maxResults) {
        List<ReqTable> results = reqTableRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<ReqTableDTO> findAll(PageRequestByExample<ReqTableDTO> req) {
        Example<ReqTable> example = null;
        ReqTable reqTable = toEntity(req.example);

        if (reqTable != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(ReqTable_.reqBy.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(reqTable, matcher);
        }

        Page<ReqTable> page;
        if (example != null) {
            page = reqTableRepository.findAll(example, req.toPageable());
        } else {
            page = reqTableRepository.findAll(req.toPageable());
        }

        List<ReqTableDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public ReqTableDTO save(ReqTableDTO dto) {
        if (dto == null) {
            return null;
        }

        final ReqTable reqTable;

        if (dto.isIdSet()) {
            ReqTable reqTableTmp = reqTableRepository.findOne(dto.id);
            if (reqTableTmp != null) {
                reqTable = reqTableTmp;
            } else {
                reqTable = new ReqTable();
                reqTable.setId(dto.id);
            }
        } else {
            reqTable = new ReqTable();
        }

        reqTable.setReqBy(dto.reqBy);

        reqTable.setIv1(dto.iv1);

        reqTable.setIv2(dto.iv2);

        reqTable.setIv3(dto.iv3);

        reqTable.setStatus(dto.status);

        if (dto.parentName == null) {
            reqTable.setParentName(null);
        } else {
            User parentName = reqTable.getParentName();
            if (parentName == null || (parentName.getId().compareTo(dto.parentName.id) != 0)) {
                reqTable.setParentName(userRepository.findOne(dto.parentName.id));
            }
        }

        return toDTO(reqTableRepository.save(reqTable));
    }

    /**
     * Converts the passed reqTable to a DTO.
     */
    public ReqTableDTO toDTO(ReqTable reqTable) {
        return toDTO(reqTable, 1);
    }

    /**
     * Converts the passed reqTable to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param reqTable
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public ReqTableDTO toDTO(ReqTable reqTable, int depth) {
        if (reqTable == null) {
            return null;
        }

        ReqTableDTO dto = new ReqTableDTO();

        dto.id = reqTable.getId();
        dto.reqBy = reqTable.getReqBy();
        dto.iv1 = reqTable.getIv1();
        dto.iv2 = reqTable.getIv2();
        dto.iv3 = reqTable.getIv3();
        dto.status = reqTable.getStatus();
        if (depth-- > 0) {
            dto.parentName = userDTOService.toDTO(reqTable.getParentName(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a ReqTable.
     * Convenient for query by example.
     */
    public ReqTable toEntity(ReqTableDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a ReqTable.
     * Convenient for query by example.
     */
    public ReqTable toEntity(ReqTableDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        ReqTable reqTable = new ReqTable();

        reqTable.setId(dto.id);
        reqTable.setReqBy(dto.reqBy);
        reqTable.setIv1(dto.iv1);
        reqTable.setIv2(dto.iv2);
        reqTable.setIv3(dto.iv3);
        reqTable.setStatus(dto.status);
        if (depth-- > 0) {
            reqTable.setParentName(userDTOService.toEntity(dto.parentName, depth));
        }

        return reqTable;
    }
}