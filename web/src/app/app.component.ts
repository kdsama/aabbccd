//
// Project home: https://github.com/jaxio/celerio-angular-quickstart
// 
// Source code generated by Celerio, an Open Source code generator by Jaxio.
// Documentation: http://www.jaxio.com/documentation/celerio/
// Source code: https://github.com/jaxio/celerio/
// Follow us on twitter: @jaxiosoft
// This header can be customized in Celerio conf...
// Template pack-angular:web/src/app/app.component.ts.p.vm
//
import { Component, OnInit } from '@angular/core';
import { RouterModule } from '@angular/router';
import { Observable } from 'rxjs/Observable';
import { Message, MenuItem } from 'primeng/primeng';
import { AuthService } from './service/auth.service';
import { MessageService } from './service/message.service';

/**
 * The Root component.
 * Defines the main layout and handles user login in a dialog.
 */
@Component({
    moduleId: module.id,
    selector: 'app-root',
    templateUrl: 'app.component.html',
    styles: [`
        .layout div {
            background-color: white;
            border: 1px solid #f5f7f8;
        }
    `]
})
export class AppComponent implements OnInit {
    public items: MenuItem[] = [{ label: 'hello' }];
    msgs: Message[] = [];

    displayLoginDialog: boolean = false;
    loginFailed: boolean = false;
    authenticated: boolean = false;
    j_username: string = "admin";
    j_password: string = "admin";

    notadmin: boolean
    constructor(private authService: AuthService, private messageService: MessageService) {
        messageService.messageSource$.subscribe(
            msg => {
                this.msgs.push(msg);
            });
    }

    menuItems = [{
        title: "Dashboard",
        iconClasses: ["fa", "fa-home"],
        children: [{
            title: "Components"
        }, {
            title: "Charts"
        }, {
            title: "UI Features"
        }]
    }, {
        title: "Monitoring",
        iconClasses: ["fa", "fa-laptop"],
        children: [{
            title: "UI Features"
        }]
    }, {
        title: "Settings",
        iconClasses: ["fa", "fa-gear"],
        children: [{
            title: "UI Features",
            children: [{
                title: "Tables"
            }, {
                title: "Maps"
            }]
        }]
    }]
    ngOnInit() {

        this.items = [
            { label: 'Home', routerLink: ['/'], icon: 'fa-home' },

            //{ label: 'Swagger', url : "/swagger-ui.html", icon: 'fa-gear' },
            {
                label: 'Documentation',
                icon: 'fa-book',
                items: [
                    { label: "Source code", icon: 'fa-github-alt', url: "https://github.com/jaxio/celerio-angular-quickstart" },
                    { label: "Celerio Documentation", icon: 'fa-external-link', url: "http://www.jaxio.com/documentation/celerio/" },
                    { label: "Angular Cli", icon: 'fa-external-link', url: "https://cli.angular.io/" },
                    { label: "Angular 4", icon: 'fa-external-link', url: "https://angular.io/" },
                    { label: "Material 2", icon: 'fa-external-link', url: "https://material.angular.io/" },
                    { label: "PrimeNG Showcase", icon: 'fa-external-link', url: "http://www.primefaces.org/primeng" },
                    { label: "TypeScript", icon: 'fa-external-link', url: "https://www.typescriptlang.org/" },
                    { label: "Spring Boot", icon: 'fa-external-link', url: "http://projects.spring.io/spring-boot/" },
                    { label: "Spring Data JPA", icon: 'fa-external-link', url: "http://projects.spring.io/spring-data-jpa/" }
                ]
            }
        ];

        this.authService.isAuthenticated().
            subscribe(
            resp => {
                console.log("hello this is repponse")
                console.log(resp)
                this.authenticated = resp;
                this.displayLoginDialog = !this.authenticated;
                if (this.authenticated) {
                    this.items.push({ label: 'Sign out', url: '/api/logout', icon: 'fa-sign-out' });
                    console.log('You are authenticated...', '');
                } else {
                    console.log('You are NOT authenticated...', '');
                }
            },
            error => this.messageService.error('isAuthenticated Error', error)
            );
    }

    login() {
        this.authService.login(this.j_username, this.j_password).
            subscribe(
            loginOk => {
                if (loginOk) {
                    this.displayLoginDialog = false;
                    this.authenticated = true;
                    // this.items.push({ label: 'Sign out', url: '/api/logout', icon: 'fa-sign-out' });
                    this.loginFailed = false;
                    this.messageService.info('You are now logged in.', '');
                    if (this.j_username == "admin") {
                            this.items.push(
                            {
                                label: 'Entities', icon: 'fa-search', items: [
                                    // {label: 'Author Search', routerLink: ['/author-list']},
                                    // {label: 'Author Create', routerLink: ['/author/new']},
                                    // {label: 'Book Search', routerLink: ['/book-list']},
                                    // {label: 'Book Create', routerLink: ['/book/new']},
                                    { label: 'DisTable Search', routerLink: ['/disTable-list'] },
                                    { label: 'DisTable Create', routerLink: ['/disTable/new'] },
                                    { label: 'ManuTable Search', routerLink: ['/manuTable-list'] },
                                    //{ label: 'ManuTable Create', routerLink: ['/manuTable/new'] },
                                    // {label: 'Passport Search', routerLink: ['/passport-list']},
                                    // {label: 'Passport Create', routerLink: ['/passport/new']},
                                    // {label: 'Project Search', routerLink: ['/project-list']},
                                    // {label: 'Project Create', routerLink: ['/project/new']},
                                    { label: 'ReqTable Search', routerLink: ['/reqTable-list'] },
                                    //{ label: 'ReqTable Create', routerLink: ['/reqTable/new'] },
                                    //{ label: 'Role Search', routerLink: ['/role-list'] },
                                    //{ label: 'Role Create', routerLink: ['/role/new'] },
                                    { label: 'SupTable Search', routerLink: ['/supTable-list'] },
                                    //{ label: 'SupTable Create', routerLink: ['/supTable/new'] },
                                    // {label: 'UseCase1 Search', routerLink: ['/useCase1-list']},
                                    // {label: 'UseCase1 Create', routerLink: ['/useCase1/new']},
                                    // {label: 'UseCase2 Search', routerLink: ['/useCase2-list']},
                                    // {label: 'UseCase2 Create', routerLink: ['/useCase2/new']},
                                    // {label: 'UseCase3 Search', routerLink: ['/useCase3-list']},
                                    // {label: 'UseCase3 Create', routerLink: ['/useCase3/new']},
                                    { label: 'User Search', routerLink: ['/user-list'] },
                                    { label: 'User Create', routerLink: ['/user/new'] }
                                    //{ label: 'UserDetails Search', routerLink: ['/userDetails-list'] },
                                    //{ label: 'UserDetails Create', routerLink: ['/userDetails/new'] }
                                    ]
                            }, );
                            this.items.push({ label: 'Sign out', url: '/api/logout', icon: 'fa-sign-out' });
                    } else if(this.j_username=="super"){
                        this.items.push(
                            {
                                label: 'Entities', icon: 'fa-search', items: [
                                    // {label: 'Author Search', routerLink: ['/author-list']},
                                    // {label: 'Author Create', routerLink: ['/author/new']},
                                    // {label: 'Book Search', routerLink: ['/book-list']},
                                    // {label: 'Book Create', routerLink: ['/book/new']},
                                    { label: 'DisTable Search', routerLink: ['/disTable-list'] },
                                    // { label: 'DisTable Create', routerLink: ['/disTable/new'] },
                                    // { label: 'ManuTable Search', routerLink: ['/manuTable-list'] },
                                    //{ label: 'ManuTable Create', routerLink: ['/manuTable/new'] },
                                    // {label: 'Passport Search', routerLink: ['/passport-list']},
                                    // {label: 'Passport Create', routerLink: ['/passport/new']},
                                    // {label: 'Project Search', routerLink: ['/project-list']},
                                    // {label: 'Project Create', routerLink: ['/project/new']},
                                    { label: 'ReqTable Search', routerLink: ['/reqTable-list'] },
                                    { label: 'ReqTable Create', routerLink: ['/reqTable/new'] },
                                    // { label: 'Role Search', routerLink: ['/role-list'] },
                                    // { label: 'Role Create', routerLink: ['/role/new'] },
                                    { label: 'SupTable Search', routerLink: ['/supTable-list'] },
                                    // { label: 'SupTable Create', routerLink: ['/supTable/new'] },
                                    // {label: 'UseCase1 Search', routerLink: ['/useCase1-list']},
                                    // {label: 'UseCase1 Create', routerLink: ['/useCase1/new']},
                                    // {label: 'UseCase2 Search', routerLink: ['/useCase2-list']},
                                    // {label: 'UseCase2 Create', routerLink: ['/useCase2/new']},
                                    // {label: 'UseCase3 Search', routerLink: ['/useCase3-list']},
                                    // {label: 'UseCase3 Create', routerLink: ['/useCase3/new']},
                                    { label: 'User Search', routerLink: ['/user-list'] },
                                    { label: 'User Create', routerLink: ['/user/new'] },
                                    // { label: 'UserDetails Search', routerLink: ['/userDetails-list'] },
                                    // { label: 'UserDetails Create', routerLink: ['/userDetails/new'] }
                                    ]
                            }, );
                            this.items.push({ label: 'Sign out', url: '/api/logout', icon: 'fa-sign-out' });
                    }
                    else{
                        this.items.push(
                            {
                                label: 'Entities', icon: 'fa-search', items: [
                                    // {label: 'Author Search', routerLink: ['/author-list']},
                                    // {label: 'Author Create', routerLink: ['/author/new']},
                                    // {label: 'Book Search', routerLink: ['/book-list']},
                                    // {label: 'Book Create', routerLink: ['/book/new']},
                                    //{ label: 'DisTable Search', routerLink: ['/disTable-list'] },
                                    // { label: 'DisTable Create', routerLink: ['/disTable/new'] },
                                    // { label: 'ManuTable Search', routerLink: ['/manuTable-list'] },
                                    //{ label: 'ManuTable Create', routerLink: ['/manuTable/new'] },
                                    // {label: 'Passport Search', routerLink: ['/passport-list']},
                                    // {label: 'Passport Create', routerLink: ['/passport/new']},
                                    // {label: 'Project Search', routerLink: ['/project-list']},
                                    // {label: 'Project Create', routerLink: ['/project/new']},
                                    { label: 'ReqTable Search', routerLink: ['/reqTable-list'] },
                                    { label: 'ReqTable Create', routerLink: ['/reqTable/new'] },
                                    // { label: 'Role Search', routerLink: ['/role-list'] },
                                    // { label: 'Role Create', routerLink: ['/role/new'] },
                                    //{ label: 'SupTable Search', routerLink: ['/supTable-list'] },
                                    // { label: 'SupTable Create', routerLink: ['/supTable/new'] },
                                    // {label: 'UseCase1 Search', routerLink: ['/useCase1-list']},
                                    // {label: 'UseCase1 Create', routerLink: ['/useCase1/new']},
                                    // {label: 'UseCase2 Search', routerLink: ['/useCase2-list']},
                                    // {label: 'UseCase2 Create', routerLink: ['/useCase2/new']},
                                    // {label: 'UseCase3 Search', routerLink: ['/useCase3-list']},
                                    // {label: 'UseCase3 Create', routerLink: ['/useCase3/new']},
                                    //{ label: 'User Search', routerLink: ['/user-list'] },
                                    //{ label: 'User Create', routerLink: ['/user/new'] },
                                    // { label: 'UserDetails Search', routerLink: ['/userDetails-list'] },
                                    // { label: 'UserDetails Create', routerLink: ['/userDetails/new'] }
                                    ]
                            }, );
                            this.items.push({ label: 'Sign out', url: '/api/logout', icon: 'fa-sign-out' });

                    }

                } else {
                    this.loginFailed = true;
                    this.displayLoginDialog = true;
                    this.authenticated = false;
                }
            },
            error => {
                this.messageService.error('Login error', error);
                this.loginFailed = true;
                this.displayLoginDialog = true;
                this.authenticated = false;
            }
            );
    }

    // sample method from angular doc
    private handleError(error: any) {
        let errMsg = (error.message) ? error.message :
            error.status ? `Status: ${error.status} - Text: ${error.statusText}` : 'Server error';
        console.error(errMsg); // log to console instead
        return Observable.throw(errMsg);
    }
}
